import click
import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import make_column_transformer

@click.command()
@click.argument('train_data', type=str)
@click.argument('test_data', type=str)
@click.argument('train_output_file', type=str)
@click.argument('test_output_file', type=str)
def preprocess_data(train_data, test_data, train_output_file, test_output_file):
    """
    Reads train and test data, performs data preprocessing, 
    and saves the preprocessed train and test data to separate output files.
    """
    # Read the train and test data
    train_df = pd.read_csv(train_data)
    test_df = pd.read_csv(test_data)
    
    # Separate the target variable
    y_train = train_df['Revenue']
    y_test = test_df['Revenue']

    # Remove the target variable from features
    train_df = train_df.drop(columns=['Revenue'])
    test_df = test_df.drop(columns=['Revenue'])
    
    # Define transformers
    numeric_transformer = StandardScaler()
    categorical_transformer = OneHotEncoder(handle_unknown="ignore", sparse_output=False)
    binary_transformer = OneHotEncoder(drop='if_binary', dtype=int)

    # Define feature groups
    numeric_features = ['Administrative', 'Administrative_Duration', 'Informational',
                        'Informational_Duration', 'ProductRelated', 'ProductRelated_Duration',
                        'BounceRates', 'ExitRates', "PageValues", 'SpecialDay']

    categorical_features = ['Month', 'VisitorType']

    passthrough_features = ['Browser', 'Region', 'TrafficType']

    binary_features = ['Weekend']
    
    # Create preprocessor with feature groups and transformers
    preprocessor = make_column_transformer(
        (numeric_transformer, numeric_features),
        (categorical_transformer, categorical_features),
        (binary_transformer, binary_features),
        ('passthrough', passthrough_features)
    )
    
    # Fit and transform the train data
    preprocessed_train_data = preprocessor.fit_transform(train_df)
    
    # Transform the test data
    preprocessed_test_data = preprocessor.transform(test_df)

    # Get the names of the new columns generated by one-hot encoding
    categorical_encoder = preprocessor.named_transformers_['onehotencoder-1']
    one_hot_encoded_columns = list(categorical_encoder.get_feature_names_out(categorical_features))
    
    # Update column_names to include the new one-hot encoded columns
    column_names = numeric_features + one_hot_encoded_columns + passthrough_features + binary_features
    
    # Convert preprocessed data back to DataFrame
    train_df_preprocessed = pd.DataFrame(preprocessed_train_data, columns=column_names)
    test_df_preprocessed = pd.DataFrame(preprocessed_test_data, columns=column_names)

    # Add the 'Revenue' column back
    train_df_preprocessed['Revenue'] = y_train.values
    test_df_preprocessed['Revenue'] = y_test.values
    
    # Save the preprocessed train and test data to output files
    train_df_preprocessed.to_csv(train_output_file, index=False)
    test_df_preprocessed.to_csv(test_output_file, index=False)
    
    click.echo(f"Data preprocessing completed. Preprocessed train data saved to: {train_output_file}")
    click.echo(f"Preprocessed test data saved to: {test_output_file}")

if __name__ == "__main__":
    preprocess_data()